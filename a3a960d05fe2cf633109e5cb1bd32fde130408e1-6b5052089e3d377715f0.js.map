{"version":3,"file":"a3a960d05fe2cf633109e5cb1bd32fde130408e1-6b5052089e3d377715f0.js","mappings":"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","sources":["webpack://z-game/./src/game/item.ts","webpack://z-game/./src/game/MapCell.ts","webpack://z-game/./src/game/GameData.ts","webpack://z-game/./src/game/event.ts","webpack://z-game/./src/game/lib/GameMap.ts","webpack://z-game/./src/images/sprite.png","webpack://z-game/./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js"],"sourcesContent":["export type Item = {\n  id: number\n  label: string\n  onUse?: () => void\n}\n\nexport type ItemUpdater = (items: Item[]) => Item[]\n\nexport const itemLabels: { [id: number]: string } = {\n  0: 'nut (edible)',\n}\n","import { Cell, Appearance } from './lib/GameMap'\nimport { Polygon } from './lib/vec'\n\nimport { GameEventContext } from './context'\nimport { GameEventTarget } from './event'\nimport { itemLabels } from './item'\n\ntype CollisionDir = {\n  top: boolean\n  bottom: boolean\n  left: boolean\n  right: boolean\n}\n\nclass MapCell extends GameEventTarget<MapCell> implements Cell {\n  private readonly eventCtx: GameEventContext\n  v: { [layer: string]: Appearance }\n  typ: number\n  colDir: CollisionDir\n  meta: string[]\n  override: { [layer: string]: () => Appearance | null }\n  numItems: number\n  state: {\n    itemsEarned: number\n  }\n  gameover: boolean\n\n  constructor(\n    ec: GameEventContext,\n    v: { [layer: string]: Appearance },\n    typ: number,\n    col: CollisionDir,\n    meta: string[],\n  ) {\n    super()\n    this.eventCtx = ec\n    this.v = v\n    this.typ = typ\n    this.colDir = col\n    this.meta = meta\n    this.override = {}\n    this.state = {\n      itemsEarned: 0,\n    }\n\n    this.gameover = meta.some((v) => v === 'gameover')\n\n    const items = meta.reduce<number[]>((acc, m) => {\n      const [t, v] = m.split('.')\n      if (t === 'item') {\n        acc.push(parseInt(v))\n      }\n      return acc\n    }, [])\n    this.numItems = items.length\n    if (this.numItems > 0) {\n      const self = this\n      this.override['overlayAnime'] = (): Appearance | null => {\n        if (self.state.itemsEarned < items.length) {\n          return [0, 2]\n        }\n        return null\n      }\n      this.onAction.push((e) => {\n        if (self.state.itemsEarned < self.numItems) {\n          e.updateItems((itemsPrev) => {\n            const id = items[self.state.itemsEarned]\n            e.effectItem(id)\n            itemsPrev.push({\n              id: id,\n              label: itemLabels[id],\n              onUse: () => {\n                e.updateItems((itemsPrev) =>\n                  itemsPrev.filter((item) => item.id !== id),\n                )\n                if (id === 0) {\n                  e.dialogManager.showMessage('Nyoh, biji', { timeout: 2000 })\n                }\n              },\n            })\n            return itemsPrev\n          })\n          self.state.itemsEarned += 1\n        }\n      })\n    }\n  }\n\n  clone(): MapCell {\n    return new MapCell(\n      this.eventCtx,\n      Object.keys(this.v).reduce((acc, k) => {\n        acc[k] = [...this.v[k]]\n        return acc\n      }, {} as { [layer: string]: Appearance }),\n      this.typ,\n      { ...this.colDir },\n      [...this.meta],\n    )\n  }\n\n  appearance(layer: string): Appearance {\n    if (layer in this.override) {\n      const overriden = this.override[layer]()\n      if (overriden) {\n        return overriden\n      }\n    }\n    return this.v[layer]\n  }\n\n  heat(): boolean {\n    return this.typ == 2\n  }\n\n  collision(): Polygon[] {\n    const topOffset = 0.05\n    const pol: Polygon[] = []\n    if (this.colDir.top) {\n      pol.push([\n        [0, topOffset],\n        [1, topOffset],\n      ])\n    }\n    if (this.colDir.right && this.colDir.bottom && !this.colDir.left) {\n      pol.push([\n        [1, topOffset],\n        [1, 0.9],\n        [0.3, 1.4],\n        [0, 1.4],\n      ])\n      return pol\n    }\n    if (this.colDir.left && this.colDir.bottom && !this.colDir.right) {\n      pol.push([\n        [1, 1.4],\n        [0.7, 1.4],\n        [0, 0.9],\n        [0, topOffset],\n      ])\n      return pol\n    }\n\n    if (this.colDir.right) {\n      pol.push([\n        [1, 0.1],\n        [1, 1.4],\n      ])\n    }\n    if (this.colDir.bottom) {\n      pol.push([\n        [1, 1.4],\n        [0, 1.4],\n      ])\n    }\n    if (this.colDir.left) {\n      pol.push([\n        [0, 1.4],\n        [0, 0.1],\n      ])\n    }\n\n    return pol\n  }\n\n  headUpText(): number {\n    if (this.state.itemsEarned < this.numItems) {\n      return 1\n    }\n    if (this.typ == 2) {\n      return 2\n    }\n    return 0\n  }\n}\n\nexport default MapCell\n","import GameMap from './lib/GameMap'\nimport { Vec2 } from './lib/vec'\n\nimport MapCell from './MapCell'\nimport { GameEventContext } from './context'\n\nimport mapData from './data/map.yaml'\n\ntype GameMetaData = {\n  init: {\n    kernel: Vec2\n  }\n  spawn: { [name: string]: Vec2 }\n}\n\ntype GameData = GameMetaData & {\n  m: GameMap<MapCell>\n}\n\nexport const importGameData = (ec: GameEventContext): GameData => {\n  const mw = mapData.main[0].length\n  const mh = mapData.main.length\n\n  const meta = (mapData.meta as Array<Array<Array<string>>>).reduce(\n    (out, row, j) =>\n      row.reduce(\n        (out, m, i) =>\n          m.reduce((out, d) => {\n            const n = d.split('.')\n            switch (n[0]) {\n              case 'init':\n                out.init = { kernel: [i * 16, j * 16] }\n                break\n              case 'spawn':\n                out.spawn[n[1]] = [i * 16, j * 16]\n                break\n            }\n            return out\n          }, out),\n        out,\n      ),\n    {\n      init: {\n        kernel: [0, 0],\n      },\n      spawn: {},\n    } as GameMetaData,\n  )\n\n  return {\n    ...meta,\n    m: new GameMap<MapCell>(\n      [mw, mh],\n      (x: number, y: number) => {\n        const t = mapData.type[y][x]\n        const tr = x + 1 > mw - 1 ? mw - 1 : mapData.type[y][x + 1]\n        const tl = x - 1 < 0 ? 0 : mapData.type[y][x - 1]\n        const tt = y - 1 < 0 ? 0 : mapData.type[y - 1][x]\n        const tb = y + 1 > mh - 1 ? mh - 1 : mapData.type[y + 1][x]\n        const col = {\n          top: t == 2 || t == 3 || (t == 1 && tt != 1),\n          bottom: t == 1 && tb != 1,\n          left: t == 1 && tl != 1,\n          right: t == 1 && tr != 1,\n        }\n        const metaOverride = y === mh - 1 ? ['gameover'] : []\n        const c = new MapCell(\n          ec,\n          {\n            main: [mapData.main[y][x][0], mapData.main[y][x][1]],\n            under: [mapData.under[y][x][0], mapData.under[y][x][1]],\n            overlay: [mapData.overlay[y][x][0], mapData.overlay[y][x][1]],\n            overlayAnime: [\n              mapData.overlayAnime[y][x][0],\n              mapData.overlayAnime[y][x][1],\n            ],\n          },\n          t,\n          col,\n          [...mapData.meta[y][x], ...metaOverride],\n        )\n        return c\n      },\n      [-100, 0],\n      [100, mh],\n      [640, 480],\n    ),\n  }\n}\n\nexport const exportGameData = (g: GameData): Blob => {\n  const paddedArray = (a: Array<Array<string>>): string => {\n    const len = new Array<number>(g.m.sz[0])\n    a.forEach((r) =>\n      r.forEach((v, i) => {\n        if (!len[i] || len[i] < v.length) {\n          len[i] = v.length\n        }\n      }),\n    )\n    return a\n      .reduce((out, r) => {\n        out.push(\n          `  - [ ${r\n            .reduce<Array<string>>((acc, v, i) => {\n              const pad = len[i] - v.length\n              acc.push(`${' '.repeat(pad)}${v}`)\n              return acc\n            }, [])\n            .join(', ')} ]`,\n        )\n        return out\n      }, [])\n      .join('\\n')\n  }\n  const extractLayer = (layer: string) =>\n    [...Array(g.m.sz[1])].map((_, j) =>\n      [...Array(g.m.sz[0])].map((_, i) =>\n        JSON.stringify(g.m.at([i, j]).v[layer]),\n      ),\n    )\n  const extractMeta = () =>\n    [...Array(g.m.sz[1])].map((_, j) =>\n      [...Array(g.m.sz[0])].map((_, i) => JSON.stringify(g.m.at([i, j]).meta)),\n    )\n  const extractType = () =>\n    [...Array(g.m.sz[1])].map((_, j) =>\n      [...Array(g.m.sz[0])].map((_, i) => JSON.stringify(g.m.at([i, j]).typ)),\n    )\n\n  const data: { [key: string]: Array<Array<string>> } = {\n    meta: extractMeta(),\n    main: extractLayer('main'),\n    type: extractType(),\n    under: extractLayer('under'),\n    overlay: extractLayer('overlay'),\n    overlayAnime: extractLayer('overlayAnime'),\n  }\n\n  return new Blob(\n    [\n      Object.keys(data)\n        .map((k) => `${k}:\\n${paddedArray(data[k])}`)\n        .join('\\n') + '\\n',\n    ],\n    {\n      type: 'plain/text',\n    },\n  )\n}\n\nexport default GameData\n","import { GameEventContext } from './context'\n\nexport type EventHandler<T> = (e: GameEvent<T>) => void\n\nexport class GameEventTarget<T> {\n  onArrive: EventHandler<T>[]\n  onAction: EventHandler<T>[]\n\n  constructor() {\n    this.onArrive = []\n    this.onAction = []\n  }\n}\n\nexport type GameEvent<T> = GameEventContext & {\n  target: T\n}\n","import { Drawer } from './Sprite'\nimport { Vec2, Polygon } from './vec'\n\nexport type Appearance = [number, number]\n\nexport interface Cell {\n  appearance(layer: string): Appearance\n}\n\nexport interface CollisionCell extends Cell {\n  collision(): Polygon[]\n}\n\nclass GameMap<T extends Cell> {\n  readonly sz: Vec2\n  readonly data: Array<T>\n  readonly s: Vec2\n  readonly e: Vec2\n  readonly screenSize: Vec2\n  readonly baseScale: number\n\n  constructor(\n    sz: Vec2,\n    loader: (x: number, y: number) => T,\n    s: Vec2,\n    e: Vec2,\n    screenSize: Vec2,\n    baseScale = 1,\n  ) {\n    this.sz = sz\n    this.s = s\n    this.e = e\n    this.screenSize = screenSize\n    this.baseScale = baseScale\n    this.data = new Array<T>(sz[0] * sz[1])\n    for (let j = 0; j < sz[1]; j++) {\n      for (let i = 0; i < sz[0]; i++) {\n        this.data[j * sz[0] + i] = loader(i, j)\n      }\n    }\n  }\n\n  at(p: Vec2): T {\n    const p2 = posMod([Math.floor(p[0]), Math.floor(p[1])], this.sz)\n    return this.data[p2[1] * this.sz[0] + p2[0]]\n  }\n\n  set(p: Vec2, v: T) {\n    const p2 = posMod([Math.floor(p[0]), Math.floor(p[1])], this.sz)\n    this.data[p2[1] * this.sz[0] + p2[0]] = v\n  }\n\n  draw(\n    ctx: CanvasRenderingContext2D,\n    d: Drawer,\n    o: Vec2,\n    scale: number,\n    layer: string,\n  ) {\n    const v = cellRange(\n      d.sz(),\n      this.s,\n      this.e,\n      o,\n      this.screenSize,\n      scale,\n      this.baseScale,\n    )\n    const [cw, ch] = d.sz()\n\n    for (let j = v.s[1]; j < v.e[1]; j++) {\n      for (let i = v.s[0]; i < v.e[0]; i++) {\n        const c = this.at([i, j])\n        const a = c.appearance(layer)\n        d.draw(ctx, [v.o[0] + i * cw, v.o[1] + j * ch], scale, a[0], a[1])\n      }\n    }\n  }\n}\n\nconst posMod = (a: Vec2, b: Vec2): Vec2 => {\n  const m = [a[0] % b[0], a[1] % b[1]]\n  return [m[0] < 0 ? m[0] + b[0] : m[0], m[1] < 0 ? m[1] + b[1] : m[1]]\n}\n\nexport const cellRange = (\n  sz: Vec2,\n  s: Vec2,\n  e: Vec2,\n  o: Vec2,\n  screenSize: Vec2,\n  scale: number,\n  baseScale: number,\n): {\n  s: Vec2\n  e: Vec2\n  o: Vec2\n} => {\n  o[0] = Math.floor(o[0])\n  o[1] = Math.floor(o[1])\n\n  const gw = Math.round(screenSize[0] / (sz[0] * scale)) + 2\n  const gh = Math.round(screenSize[1] / (sz[1] * scale)) + 2\n\n  const left = o[0] + s[0] * sz[0] + sz[0]\n  const top = o[1] + s[1] * sz[1] + sz[1]\n\n  const si2 = left >= 0 ? s[0] : s[0] - Math.floor(left / sz[0]) - baseScale\n  const ei2 = si2 + gw + baseScale\n\n  const sj2 = top >= 0 ? s[1] : s[1] - Math.floor(top / sz[1]) - baseScale\n  const ej2 = sj2 + gh + baseScale\n\n  return {\n    s: [si2, sj2],\n    e: [ei2, ej2],\n    o,\n  }\n}\n\nexport default GameMap\n","export default __webpack_public_path__ + \"static/sprite-5eff9c0d932e8194cf3edbe77d766708.png\";","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}"],"names":["itemLabels","MapCell","ec","v","typ","col","meta","eventCtx","colDir","override","state","itemsEarned","gameover","some","items","reduce","acc","m","split","t","push","parseInt","numItems","length","self","onAction","e","updateItems","itemsPrev","id","effectItem","label","onUse","filter","item","dialogManager","showMessage","timeout","clone","this","Object","keys","k","appearance","layer","overriden","heat","collision","topOffset","pol","top","right","bottom","left","headUpText","GameEventTarget","importGameData","mw","mapData","mh","out","row","j","i","d","n","init","kernel","spawn","GameMap","x","y","tr","tl","tt","tb","metaOverride","main","under","overlay","overlayAnime","exportGameData","g","extractLayer","Array","sz","map","_","JSON","stringify","at","data","type","Blob","a","len","forEach","r","pad","repeat","join","onArrive","loader","s","screenSize","baseScale","p","p2","posMod","Math","floor","set","draw","ctx","o","scale","cellRange","cw","ch","b","gw","round","gh","si2","ei2","sj2","_assertThisInitialized","ReferenceError"],"sourceRoot":""}