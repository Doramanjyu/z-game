{"version":3,"file":"a3a960d05fe2cf633109e5cb1bd32fde130408e1-6cfb262286044ea476ce.js","mappings":"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","sources":["webpack://z-game/./src/game/MapCell.ts","webpack://z-game/./src/game/GameData.ts","webpack://z-game/./src/game/events.ts","webpack://z-game/./src/game/lib/GameMap.ts","webpack://z-game/./src/images/sprite.png"],"sourcesContent":["import { Cell, Appearance } from './lib/GameMap'\nimport { Polygon } from './lib/vec'\n\nimport { GameEventTarget } from './events'\n\ntype CollisionDir = {\n  top: boolean\n  bottom: boolean\n  left: boolean\n  right: boolean\n}\n\nclass MapCell extends GameEventTarget<MapCell> implements Cell {\n  v: { [layer: string]: Appearance }\n  typ: number\n  colDir: CollisionDir\n  meta: string[]\n\n  constructor(\n    v: { [layer: string]: Appearance },\n    typ: number,\n    col: CollisionDir,\n    meta: string[],\n  ) {\n    super()\n    this.v = v\n    this.typ = typ\n    this.colDir = col\n    this.meta = meta\n  }\n\n  appearance(layer: string): Appearance {\n    return this.v[layer]\n  }\n\n  heat(): boolean {\n    return this.typ == 2\n  }\n\n  collision(): Polygon[] {\n    const topOffset = 0.05\n    const pol: Polygon[] = []\n    if (this.colDir.top) {\n      pol.push([\n        [0, topOffset],\n        [1, topOffset],\n      ])\n    }\n    if (this.colDir.right && this.colDir.bottom && !this.colDir.left) {\n      pol.push([\n        [1, topOffset],\n        [1, 0.9],\n        [0.3, 1.4],\n        [0, 1.4],\n      ])\n      return pol\n    }\n    if (this.colDir.left && this.colDir.bottom && !this.colDir.right) {\n      pol.push([\n        [1, 1.4],\n        [0.7, 1.4],\n        [0, 0.9],\n        [0, topOffset],\n      ])\n      return pol\n    }\n\n    if (this.colDir.right) {\n      pol.push([\n        [1, 0.1],\n        [1, 1.4],\n      ])\n    }\n    if (this.colDir.bottom) {\n      pol.push([\n        [1, 1.4],\n        [0, 1.4],\n      ])\n    }\n    if (this.colDir.left) {\n      pol.push([\n        [0, 1.4],\n        [0, 0.1],\n      ])\n    }\n\n    return pol\n  }\n\n  headUpText(): number {\n    if (this.onAction.length > 0) {\n      return 1\n    }\n    if (this.typ == 2) {\n      return 2\n    }\n    return 0\n  }\n}\n\nexport default MapCell\n","import GameMap from './lib/GameMap'\nimport { Vec2 } from './lib/vec'\n\nimport MapCell from './MapCell'\nimport { EventHandler } from './events'\n\nimport mapData from './data/map.yaml'\n\ntype Props = {\n  getItem: EventHandler<MapCell>\n}\n\ntype GameMetaData = {\n  init: {\n    kernel: Vec2\n  }\n  spawn: { [name: string]: Vec2 }\n}\n\ntype GameData = GameMetaData & {\n  m: GameMap<MapCell>\n}\n\nexport const importGameData = ({ getItem }: Props): GameData => {\n  const mw = mapData.main[0].length\n  const mh = mapData.main.length\n\n  const meta = (mapData.meta as Array<Array<Array<string>>>).reduce(\n    (out, row, j) =>\n      row.reduce(\n        (out, m, i) =>\n          m.reduce((out, d) => {\n            const n = d.split('.')\n            switch (n[0]) {\n              case 'init':\n                out.init = { kernel: [i * 16, j * 16] }\n                break\n              case 'spawn':\n                out.spawn[n[1]] = [i * 16, j * 16]\n                break\n            }\n            return out\n          }, out),\n        out,\n      ),\n    {\n      init: {\n        kernel: [0, 0],\n      },\n      spawn: {},\n    } as GameMetaData,\n  )\n\n  return {\n    ...meta,\n    m: new GameMap<MapCell>(\n      [mw, mh],\n      (x: number, y: number) => {\n        const t = mapData.type[y][x]\n        const tr = x + 1 > mw - 1 ? mw - 1 : mapData.type[y][x + 1]\n        const tl = x - 1 < 0 ? 0 : mapData.type[y][x - 1]\n        const tt = y - 1 < 0 ? 0 : mapData.type[y - 1][x]\n        const tb = y + 1 > mh - 1 ? mh - 1 : mapData.type[y + 1][x]\n        const col = {\n          top: t == 2 || t == 3 || (t == 1 && tt != 1),\n          bottom: t == 1 && tb != 1,\n          left: t == 1 && tl != 1,\n          right: t == 1 && tr != 1,\n        }\n        const items = (mapData.meta[y][x] as string[]).reduce<number[]>(\n          (acc, m) => {\n            const [t, v] = m.split('.')\n            if (t === 'item') {\n              acc.push(parseInt(v))\n            }\n            return acc\n          },\n          [],\n        )\n        const c = new MapCell(\n          {\n            main: [mapData.main[y][x][0], mapData.main[y][x][1]],\n            under: [mapData.under[y][x][0], mapData.under[y][x][1]],\n            overlay: [mapData.overlay[y][x][0], mapData.overlay[y][x][1]],\n            overlayAnime:\n              items.length > 0\n                ? [0, 2]\n                : [\n                    mapData.overlayAnime[y][x][0],\n                    mapData.overlayAnime[y][x][1],\n                  ],\n          },\n          t,\n          col,\n          mapData.meta[y][x],\n        )\n        if (items.length > 0) {\n          c.onAction.push((e) => {\n            c.onAction = []\n            e.target.v['overlayAnime'] = [0, 0]\n            getItem(e)\n          })\n        }\n        return c\n      },\n      [-100, 0],\n      [100, mh],\n      [640, 480],\n    ),\n  }\n}\n\nexport const exportGameData = (g: GameData): Blob => {\n  const paddedArray = (a: Array<Array<string>>): string => {\n    const len = new Array<number>(g.m.sz[0])\n    a.forEach((r) =>\n      r.forEach((v, i) => {\n        if (!len[i] || len[i] < v.length) {\n          len[i] = v.length\n        }\n      }),\n    )\n    return a\n      .reduce((out, r) => {\n        out.push(\n          `  - [ ${r\n            .reduce<Array<string>>((acc, v, i) => {\n              const pad = len[i] - v.length\n              acc.push(`${' '.repeat(pad)}${v}`)\n              return acc\n            }, [])\n            .join(', ')} ]`,\n        )\n        return out\n      }, [])\n      .join('\\n')\n  }\n  const extractLayer = (layer: string) =>\n    [...Array(g.m.sz[1])].map((_, j) =>\n      [...Array(g.m.sz[0])].map((_, i) =>\n        JSON.stringify(g.m.at([i, j]).appearance(layer)),\n      ),\n    )\n  const extractMeta = () =>\n    [...Array(g.m.sz[1])].map((_, j) =>\n      [...Array(g.m.sz[0])].map((_, i) => JSON.stringify(g.m.at([i, j]).meta)),\n    )\n  const extractType = () =>\n    [...Array(g.m.sz[1])].map((_, j) =>\n      [...Array(g.m.sz[0])].map((_, i) => JSON.stringify(g.m.at([i, j]).typ)),\n    )\n\n  const data: { [key: string]: Array<Array<string>> } = {\n    meta: extractMeta(),\n    main: extractLayer('main'),\n    type: extractType(),\n    under: extractLayer('under'),\n    overlay: extractLayer('overlay'),\n    overlayAnime: extractLayer('overlayAnime'),\n  }\n\n  return new Blob(\n    [\n      Object.keys(data)\n        .map((k) => `${k}:\\n${paddedArray(data[k])}`)\n        .join('\\n') + '\\n',\n    ],\n    {\n      type: 'plain/text',\n    },\n  )\n}\n\nexport default GameData\n","export type EventHandler<T> = (e: GameEvent<T>) => void\n\nexport class GameEventTarget<T> {\n  onArrive: EventHandler<T>[]\n  onAction: EventHandler<T>[]\n\n  constructor() {\n    this.onArrive = []\n    this.onAction = []\n  }\n}\n\nexport type GameEvent<T> = {\n  target: T\n}\n","import { Drawer } from './Sprite'\nimport { Vec2, Polygon } from './vec'\n\nexport type Appearance = [number, number]\n\nexport interface Cell {\n  appearance(layer: string): Appearance\n}\n\nexport interface CollisionCell extends Cell {\n  collision(): Polygon[]\n}\n\nclass GameMap<T extends Cell> {\n  readonly sz: Vec2\n  readonly data: Array<T>\n  readonly s: Vec2\n  readonly e: Vec2\n  readonly screenSize: Vec2\n  readonly baseScale: number\n\n  constructor(\n    sz: Vec2,\n    loader: (x: number, y: number) => T,\n    s: Vec2,\n    e: Vec2,\n    screenSize: Vec2,\n    baseScale = 1,\n  ) {\n    this.sz = sz\n    this.s = s\n    this.e = e\n    this.screenSize = screenSize\n    this.baseScale = baseScale\n    this.data = new Array<T>(sz[0] * sz[1])\n    for (let j = 0; j < sz[1]; j++) {\n      for (let i = 0; i < sz[0]; i++) {\n        this.data[j * sz[0] + i] = loader(i, j)\n      }\n    }\n  }\n\n  at(p: Vec2): T {\n    const p2 = posMod([Math.floor(p[0]), Math.floor(p[1])], this.sz)\n    return this.data[p2[1] * this.sz[0] + p2[0]]\n  }\n\n  set(p: Vec2, v: T) {\n    const p2 = posMod([Math.floor(p[0]), Math.floor(p[1])], this.sz)\n    this.data[p2[1] * this.sz[0] + p2[0]] = v\n  }\n\n  draw(\n    ctx: CanvasRenderingContext2D,\n    d: Drawer,\n    o: Vec2,\n    scale: number,\n    layer: string,\n  ) {\n    const v = cellRange(\n      d.sz(),\n      this.s,\n      this.e,\n      o,\n      this.screenSize,\n      scale,\n      this.baseScale,\n    )\n    const [cw, ch] = d.sz()\n\n    for (let j = v.s[1]; j < v.e[1]; j++) {\n      for (let i = v.s[0]; i < v.e[0]; i++) {\n        const c = this.at([i, j])\n        const a = c.appearance(layer)\n        d.draw(ctx, [v.o[0] + i * cw, v.o[1] + j * ch], scale, a[0], a[1])\n      }\n    }\n  }\n}\n\nconst posMod = (a: Vec2, b: Vec2): Vec2 => {\n  const m = [a[0] % b[0], a[1] % b[1]]\n  return [m[0] < 0 ? m[0] + b[0] : m[0], m[1] < 0 ? m[1] + b[1] : m[1]]\n}\n\nexport const cellRange = (\n  sz: Vec2,\n  s: Vec2,\n  e: Vec2,\n  o: Vec2,\n  screenSize: Vec2,\n  scale: number,\n  baseScale: number,\n): {\n  s: Vec2\n  e: Vec2\n  o: Vec2\n} => {\n  o[0] = Math.floor(o[0])\n  o[1] = Math.floor(o[1])\n\n  const gw = Math.round(screenSize[0] / (sz[0] * scale)) + 2\n  const gh = Math.round(screenSize[1] / (sz[1] * scale)) + 2\n\n  const left = o[0] + s[0] * sz[0] + sz[0]\n  const top = o[1] + s[1] * sz[1] + sz[1]\n\n  const si2 = left >= 0 ? s[0] : s[0] - Math.floor(left / sz[0]) - baseScale + 1\n  const ei2 = si2 + gw + baseScale - 1\n\n  const sj2 = top >= 0 ? s[1] : s[1] - Math.floor(top / sz[1]) - baseScale + 1\n  const ej2 = sj2 + gh + baseScale - 1\n\n  return {\n    s: [si2, sj2],\n    e: [ei2, ej2],\n    o,\n  }\n}\n\nexport default GameMap\n","export default __webpack_public_path__ + \"static/sprite-7f7f8687fed7ffcb9d00fe1fdd5fefcb.png\";"],"names":["MapCell","v","typ","col","meta","colDir","appearance","layer","this","heat","collision","topOffset","pol","top","push","right","bottom","left","headUpText","onAction","length","GameEventTarget","importGameData","getItem","mw","mapData","mh","out","row","j","reduce","m","i","d","n","split","init","kernel","spawn","GameMap","x","y","t","tr","tl","tt","tb","items","acc","parseInt","c","main","under","overlay","overlayAnime","e","target","exportGameData","g","extractLayer","Array","sz","map","_","JSON","stringify","at","data","type","Blob","Object","keys","k","a","len","forEach","r","pad","repeat","join","onArrive","loader","s","screenSize","baseScale","p","p2","posMod","Math","floor","set","draw","ctx","o","scale","cellRange","cw","ch","b","gw","round","gh","si2","ei2","sj2"],"sourceRoot":""}