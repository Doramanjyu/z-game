{"version":3,"file":"a3a960d05fe2cf633109e5cb1bd32fde130408e1-8e0152a1b54406f170b1.js","mappings":"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","sources":["webpack://z-game/./src/game/GameData.ts","webpack://z-game/./src/game/MapCell.ts","webpack://z-game/./src/game/item.ts","webpack://z-game/./src/game/event.ts","webpack://z-game/./src/game/lib/GameMap.ts","webpack://z-game/./src/images/sprite.png","webpack://z-game/./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js"],"sourcesContent":["import GameMap from './lib/GameMap'\nimport { Vec2 } from './lib/vec'\n\nimport MapCell, { CellType } from './MapCell'\nimport { GameEventContext } from './context'\n\nimport mapData from './data/map.yaml'\n\ntype GameMetaData = {\n  init: {\n    kernel: Vec2\n  }\n  spawn: { [name: string]: Vec2 }\n}\n\ntype GameData = GameMetaData & {\n  m: GameMap<MapCell>\n}\n\nexport const importGameData = (ec: GameEventContext): GameData => {\n  const mw = mapData.main[0].length\n  const mh = mapData.main.length\n\n  const meta = (mapData.meta as Array<Array<Array<string>>>).reduce(\n    (out, row, j) =>\n      row.reduce(\n        (out, m, i) =>\n          m.reduce((out, d) => {\n            const n = d.split('.')\n            switch (n[0]) {\n              case 'init':\n                out.init = { kernel: [i * 16, j * 16] }\n                break\n              case 'spawn':\n                out.spawn[n[1]] = [i * 16 + 8, j * 16]\n                break\n            }\n            return out\n          }, out),\n        out,\n      ),\n    {\n      init: {\n        kernel: [0, 0],\n      },\n      spawn: {},\n    } as GameMetaData,\n  )\n\n  return {\n    ...meta,\n    m: new GameMap<MapCell>(\n      [mw, mh],\n      (x: number, y: number) => {\n        const t = mapData.type[y][x]\n        const tr = x + 1 > mw - 1 ? mw - 1 : mapData.type[y][x + 1]\n        const tl = x - 1 < 0 ? 0 : mapData.type[y][x - 1]\n        const tt = y - 1 < 0 ? 0 : mapData.type[y - 1][x]\n        const tb = y + 1 > mh - 1 ? mh - 1 : mapData.type[y + 1][x]\n        const col = {\n          top:\n            t === CellType.Heat ||\n            t === CellType.Step ||\n            (t === CellType.Occupied && tt !== CellType.Occupied),\n          bottom: t === CellType.Occupied && tb !== CellType.Occupied,\n          left: t === CellType.Occupied && tl !== CellType.Occupied,\n          right: t === CellType.Occupied && tr !== CellType.Occupied,\n        }\n        const c = new MapCell(\n          ec,\n          {\n            main: [mapData.main[y][x][0], mapData.main[y][x][1]],\n            under: [mapData.under[y][x][0], mapData.under[y][x][1]],\n            overlay: [mapData.overlay[y][x][0], mapData.overlay[y][x][1]],\n            overlayAnime: [\n              mapData.overlayAnime[y][x][0],\n              mapData.overlayAnime[y][x][1],\n            ],\n          },\n          y === mh - 1 ? CellType.GameOver : t,\n          col,\n          mapData.meta[y][x],\n        )\n        return c\n      },\n      [-100, 0],\n      [100, mh],\n      [640, 480],\n    ),\n  }\n}\n\nexport const exportGameData = (g: GameData): Blob => {\n  const paddedArray = (a: Array<Array<string>>): string => {\n    const len = new Array<number>(g.m.sz[0])\n    a.forEach((r) =>\n      r.forEach((v, i) => {\n        if (!len[i] || len[i] < v.length) {\n          len[i] = v.length\n        }\n      }),\n    )\n    return a\n      .reduce((out, r) => {\n        out.push(\n          `  - [ ${r\n            .reduce<Array<string>>((acc, v, i) => {\n              const pad = len[i] - v.length\n              acc.push(`${' '.repeat(pad)}${v}`)\n              return acc\n            }, [])\n            .join(', ')} ]`,\n        )\n        return out\n      }, [])\n      .join('\\n')\n  }\n  const extractLayer = (layer: string) =>\n    [...Array(g.m.sz[1])].map((_, j) =>\n      [...Array(g.m.sz[0])].map((_, i) =>\n        JSON.stringify(g.m.at([i, j]).v[layer]),\n      ),\n    )\n  const extractMeta = () =>\n    [...Array(g.m.sz[1])].map((_, j) =>\n      [...Array(g.m.sz[0])].map((_, i) => JSON.stringify(g.m.at([i, j]).meta)),\n    )\n  const extractType = () =>\n    [...Array(g.m.sz[1])].map((_, j) =>\n      [...Array(g.m.sz[0])].map((_, i) => JSON.stringify(g.m.at([i, j]).typ)),\n    )\n\n  const data: { [key: string]: Array<Array<string>> } = {\n    meta: extractMeta(),\n    main: extractLayer('main'),\n    type: extractType(),\n    under: extractLayer('under'),\n    overlay: extractLayer('overlay'),\n    overlayAnime: extractLayer('overlayAnime'),\n  }\n\n  return new Blob(\n    [\n      Object.keys(data)\n        .map((k) => `${k}:\\n${paddedArray(data[k])}`)\n        .join('\\n') + '\\n',\n    ],\n    {\n      type: 'plain/text',\n    },\n  )\n}\n\nexport default GameData\n","import { Cell, Appearance } from './lib/GameMap'\nimport { Polygon } from './lib/vec'\n\nimport { GameEventContext } from './context'\nimport { GameEventTarget } from './event'\nimport { itemLabels } from './item'\n\ntype CollisionDir = {\n  top: boolean\n  bottom: boolean\n  left: boolean\n  right: boolean\n}\n\nexport const enum CellType {\n  None = 0,\n  Occupied = 1,\n  Heat = 2,\n  Step = 3,\n  GameOver = 4,\n}\n\nclass MapCell extends GameEventTarget<MapCell> implements Cell {\n  private readonly eventCtx: GameEventContext\n  v: { [layer: string]: Appearance }\n  typ: CellType\n  colDir: CollisionDir\n  meta: string[]\n  override: { [layer: string]: () => Appearance | null }\n  numItems: number\n  state: {\n    itemsEarned: number\n  }\n\n  constructor(\n    ec: GameEventContext,\n    v: { [layer: string]: Appearance },\n    typ: CellType,\n    col: CollisionDir,\n    meta: string[],\n  ) {\n    super()\n    this.eventCtx = ec\n    this.v = v\n    this.typ = typ\n    this.colDir = col\n    this.meta = meta\n    this.override = {}\n    this.state = {\n      itemsEarned: 0,\n    }\n\n    const items = meta.reduce<number[]>((acc, m) => {\n      const [t, v] = m.split('.')\n      if (t === 'item') {\n        acc.push(parseInt(v))\n      }\n      return acc\n    }, [])\n    this.numItems = items.length\n    if (this.numItems > 0) {\n      const self = this\n      this.override['overlayAnime'] = (): Appearance | null => {\n        if (self.state.itemsEarned < items.length) {\n          return [0, 2]\n        }\n        return null\n      }\n      this.onAction.push((e) => {\n        if (e && self.state.itemsEarned < self.numItems) {\n          e.updateItems((itemsPrev) => {\n            const id = items[self.state.itemsEarned]\n            e.effectItem(id)\n            itemsPrev.push({\n              id: id,\n              label: itemLabels[id],\n              onUse: () => {\n                e.updateItems((itemsPrev) =>\n                  itemsPrev.filter((item) => item.id !== id),\n                )\n                if (id === 0) {\n                  e.dialogManager.showMessage('Nyoh, biji', { timeout: 2000 })\n                }\n              },\n            })\n            return itemsPrev\n          })\n          self.state.itemsEarned += 1\n        }\n      })\n    }\n  }\n\n  clone(): MapCell {\n    return new MapCell(\n      this.eventCtx,\n      Object.keys(this.v).reduce((acc, k) => {\n        acc[k] = [...this.v[k]]\n        return acc\n      }, {} as { [layer: string]: Appearance }),\n      this.typ,\n      { ...this.colDir },\n      [...this.meta],\n    )\n  }\n\n  appearance(layer: string): Appearance {\n    if (layer in this.override) {\n      const overriden = this.override[layer]()\n      if (overriden) {\n        return overriden\n      }\n    }\n    return this.v[layer]\n  }\n\n  heat(): boolean {\n    return this.typ == CellType.Heat\n  }\n\n  collision(): Polygon[] {\n    const topOffset = 0.05\n    const pol: Polygon[] = []\n    if (this.colDir.top) {\n      pol.push([\n        [0, topOffset],\n        [1, topOffset],\n      ])\n    }\n    if (this.colDir.right && this.colDir.bottom && !this.colDir.left) {\n      pol.push([\n        [1, topOffset],\n        [1, 0.9],\n        [0.3, 1.4],\n        [0, 1.4],\n      ])\n      return pol\n    }\n    if (this.colDir.left && this.colDir.bottom && !this.colDir.right) {\n      pol.push([\n        [1, 1.4],\n        [0.7, 1.4],\n        [0, 0.9],\n        [0, topOffset],\n      ])\n      return pol\n    }\n\n    if (this.colDir.right) {\n      pol.push([\n        [1, 0.1],\n        [1, 1.4],\n      ])\n    }\n    if (this.colDir.bottom) {\n      pol.push([\n        [1, 1.4],\n        [0, 1.4],\n      ])\n    }\n    if (this.colDir.left) {\n      pol.push([\n        [0, 1.4],\n        [0, 0.1],\n      ])\n    }\n\n    return pol\n  }\n\n  headUpText(): number {\n    if (this.state.itemsEarned < this.numItems) {\n      return 1\n    }\n    if (this.typ == CellType.Heat) {\n      return 2\n    }\n    return 0\n  }\n}\n\nexport default MapCell\n","export type Item = {\n  id: number\n  label: string\n  onUse?: () => void\n}\n\nexport type ItemUpdater = (items: Item[]) => Item[]\n\nexport const itemLabels: { [id: number]: string } = {\n  0: 'nut (edible)',\n}\n","import { GameEventContext } from './context'\n\nexport type EventHandler<T> = (e?: GameEvent<T>) => void\n\nexport class GameEventTarget<T> {\n  onArrive: EventHandler<T>[]\n  onAction: EventHandler<T>[]\n\n  constructor() {\n    this.onArrive = []\n    this.onAction = []\n  }\n}\n\nexport type GameEvent<T> = GameEventContext & {\n  target: T\n}\n","import { Drawer } from './Sprite'\nimport { Vec2, Polygon } from './vec'\n\nexport type Appearance = [number, number]\n\nexport interface Cell {\n  appearance(layer: string): Appearance\n}\n\nexport interface CollisionCell extends Cell {\n  collision(): Polygon[]\n}\n\nclass GameMap<T extends Cell> {\n  readonly sz: Vec2\n  readonly data: Array<T>\n  readonly s: Vec2\n  readonly e: Vec2\n  readonly screenSize: Vec2\n  readonly baseScale: number\n\n  constructor(\n    sz: Vec2,\n    loader: (x: number, y: number) => T,\n    s: Vec2,\n    e: Vec2,\n    screenSize: Vec2,\n    baseScale = 1,\n  ) {\n    this.sz = sz\n    this.s = s\n    this.e = e\n    this.screenSize = screenSize\n    this.baseScale = baseScale\n    this.data = new Array<T>(sz[0] * sz[1])\n    for (let j = 0; j < sz[1]; j++) {\n      for (let i = 0; i < sz[0]; i++) {\n        this.data[j * sz[0] + i] = loader(i, j)\n      }\n    }\n  }\n\n  at(p: Vec2): T {\n    const p2 = posMod([Math.floor(p[0]), Math.floor(p[1])], this.sz)\n    return this.data[p2[1] * this.sz[0] + p2[0]]\n  }\n\n  set(p: Vec2, v: T) {\n    const p2 = posMod([Math.floor(p[0]), Math.floor(p[1])], this.sz)\n    this.data[p2[1] * this.sz[0] + p2[0]] = v\n  }\n\n  draw(\n    ctx: CanvasRenderingContext2D,\n    d: Drawer,\n    o: Vec2,\n    scale: number,\n    layer: string,\n  ) {\n    const v = cellRange(\n      d.sz(),\n      this.s,\n      this.e,\n      o,\n      this.screenSize,\n      scale,\n      this.baseScale,\n    )\n    const [cw, ch] = d.sz()\n\n    for (let j = v.s[1]; j < v.e[1]; j++) {\n      for (let i = v.s[0]; i < v.e[0]; i++) {\n        const c = this.at([i, j])\n        const a = c.appearance(layer)\n        d.draw(ctx, [v.o[0] + i * cw, v.o[1] + j * ch], scale, a[0], a[1])\n      }\n    }\n  }\n}\n\nconst posMod = (a: Vec2, b: Vec2): Vec2 => {\n  const m = [a[0] % b[0], a[1] % b[1]]\n  return [m[0] < 0 ? m[0] + b[0] : m[0], m[1] < 0 ? m[1] + b[1] : m[1]]\n}\n\nexport const cellRange = (\n  sz: Vec2,\n  s: Vec2,\n  e: Vec2,\n  o: Vec2,\n  screenSize: Vec2,\n  scale: number,\n  baseScale: number,\n): {\n  s: Vec2\n  e: Vec2\n  o: Vec2\n} => {\n  o[0] = Math.floor(o[0])\n  o[1] = Math.floor(o[1])\n\n  const gw = Math.round(screenSize[0] / (sz[0] * scale)) + 2\n  const gh = Math.round(screenSize[1] / (sz[1] * scale)) + 2\n\n  const left = o[0] + s[0] * sz[0] + sz[0]\n  const top = o[1] + s[1] * sz[1] + sz[1]\n\n  const si2 = left >= 0 ? s[0] : s[0] - Math.floor(left / sz[0]) - baseScale\n  const ei2 = si2 + gw + baseScale\n\n  const sj2 = top >= 0 ? s[1] : s[1] - Math.floor(top / sz[1]) - baseScale\n  const ej2 = sj2 + gh + baseScale\n\n  return {\n    s: [si2, sj2],\n    e: [ei2, ej2],\n    o,\n  }\n}\n\nexport default GameMap\n","export default __webpack_public_path__ + \"static/sprite-da08e636fdcf995089f7aa5677709da4.png\";","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}"],"names":["importGameData","ec","mw","mapData","mh","meta","out","row","j","reduce","m","i","d","n","split","init","kernel","spawn","GameMap","x","y","t","tr","tl","tt","tb","col","top","CellType","bottom","left","right","MapCell","main","under","overlay","overlayAnime","exportGameData","g","extractLayer","layer","Array","sz","map","_","JSON","stringify","at","v","data","type","typ","Blob","Object","keys","k","a","len","forEach","r","length","push","acc","pad","repeat","join","itemLabels","eventCtx","colDir","override","state","itemsEarned","items","parseInt","numItems","self","onAction","e","updateItems","itemsPrev","id","effectItem","label","onUse","filter","item","dialogManager","showMessage","timeout","clone","this","appearance","overriden","heat","Heat","collision","topOffset","pol","headUpText","GameEventTarget","onArrive","loader","s","screenSize","baseScale","p","p2","posMod","Math","floor","set","draw","ctx","o","scale","cellRange","cw","ch","b","gw","round","gh","si2","ei2","sj2","_assertThisInitialized","ReferenceError"],"sourceRoot":""}